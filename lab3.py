# -*- coding: utf-8 -*-
"""Lab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N4cfmWLnTexXTLpfSssB-NPzA9LGKE5b
"""

import os
dataset_filename = "Datasets/clickbait-headlines.tsv"
print("File: {} \nSize: {} MBs".format(dataset_filename, round(os.path.getsize(dataset_filename)/1024/1024, 2)))

import csv

data = []
labels = []

with open(dataset_filename,encoding="utf8") as f:
    reader = csv.reader(f, delimiter="\t")
    for line in reader:
        try:
            data.append(line[0])
            labels.append(line[1])
        except Exception as e:
            print(e)

print(data[:3])
print(labels[:3])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from sklearn.feature_extraction.text import TfidfVectorizer
# 
# vectorizer = TfidfVectorizer()
# vectors = vectorizer.fit_transform(data)
# print("The dimensions of our vectors:")
# print(vectors.shape)
# print("- - -")

print("The data type of our vectors")
print(type(vectors))
print("- - -")
print("The size of our vectors (MB):")
print(vectors.data.nbytes/1024/1024)
print("- - -")
print("The size of our vectors in dense format (MB):")
print(vectors.todense().nbytes/1024/1024)
print("- - - ")
print("Number of non zero elements in our vectors")
print(vectors.nnz)
print("- - -")

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(vectors,
  labels, test_size=0.2)

print(X_train.shape)
print(X_test.shape)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# from sklearn.svm import LinearSVC
# 
# svm_classifier = LinearSVC()
# svm_classifier.fit(X_train, y_train)
# 
# predictions = svm_classifier.predict(X_test)

print("prediction, label")
for i in range(10):
    print(y_test[i], predictions[i])

from sklearn.metrics import accuracy_score, classification_report

print("Accuracy: {}\n".format(accuracy_score(y_test, predictions)))
print(classification_report(y_test, predictions))